TYPE -> KEY_INT
FUNC_START -> TYPE ID ( ) {
TYPE -> KEY_INT
DEF_VALUE -> TYPE ID
DEF_V -> DEF_VALUE
S -> DEF_V
TYPE -> KEY_INT
DEF_VALUE -> TYPE ID
DEF_V -> DEF_VALUE
S -> DEF_V
TYPE -> KEY_INT
DEF_VALUE -> TYPE ID
DEF_V -> DEF_VALUE
S -> DEF_V
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> A
S -> ID = Exp
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> A
OP_LOW -> +
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> Exp OP_LOW A
OP_LOW -> +
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> Exp OP_LOW A
S -> ID = Exp
B -> ID
A -> B
Exp -> A
OP_LOW -> -
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> Exp OP_LOW A
S -> ID = Exp
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> A
OP_LOW -> -
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> Exp OP_LOW A
S -> ID = Exp
B -> ID
A -> B
OP_HIGH -> *
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> A OP_HIGH B
Exp -> A
S -> ID = Exp
B -> ID
A -> B
OP_HIGH -> /
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> A OP_HIGH B
Exp -> A
OP_LOW -> +
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> A
OP_LOW -> +
VAL_LOC -> VALUE_INT
B -> VAL_LOC
A -> B
Exp -> Exp OP_LOW A
B -> ( Exp )
A -> B
Exp -> Exp OP_LOW A
S -> ID = Exp
VAL_LOC -> VALUE_INT
RETURN -> KEY_RETURN VAL_LOC
S -> RETURN
MS -> S #END
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
MS -> S #END MS
DEF_FUNC -> FUNC_START MS }
P -> DEF_FUNC
Accept!
