[非终结符]
Exp A B MS S P VAL_LIST VAL_LIST_NEXT DEF_VAL_LIST  DEF_FUNC TYPE OP_LOW OP_HIGH VAL_LOC DEF_VALUE RETURN BOOL CMP OP_CMP IF_S ELSEIF_S ELSE_S WHILE_S DEF_STRUCT
DEF_ARRAY MULT_DEF DEF_V FUNC_START
[终结符]
= + - * / ID ( ) { } [ ] > < !  SEP_COMMA SYM_ADDR
KEY_INT KEY_FLOAT KEY_CHAR KEY_IF KEY_ELSE KEY_STRUCT
VALUE_INT KEY_RETURN KEY_WHILE VALUE_FLOAT VALUE_STRING VALUE_CHAR #END

[文法起始符]
P`

[生成式]
P` -> P;
P ->  DEF_FUNC | DEF_V #END| P DEF_FUNC| P DEF_V #END; //多条定义语句或多个函数

//多条语句
MS -> S #END MS | S #END | IF_S | WHILE_S; 

//函数参数定义序列
DEF_VAL_LIST -> TYPE ID | DEF_VAL_LIST SEP_COMMA TYPE ID;

//函数传入参数序列
VAL_LIST ->  VAL_LOC | ID | VAL_LIST SEP_COMMA ID | VAL_LIST SEP_COMMA VAL_LOC ;

//函数定义
DEF_FUNC -> FUNC_START MS } ;
FUNC_START -> TYPE ID ( DEF_VAL_LIST ) { | TYPE ID ( ) { ;

//函数使用
S -> ID ( VAL_LIST ) | ID ( );

//数组的定义
DEF_ARRAY -> TYPE ID [ VALUE_INT ] ;

//结构体的定义
MULT_DEF -> DEF_V #END;
MULT_DEF -> MULT_DEF DEF_V #END;
DEF_STRUCT -> KEY_STRUCT ID { MULT_DEF } ;

//定义语句
DEF_V -> DEF_VALUE | DEF_ARRAY | DEF_STRUCT ;
S -> DEF_V;

//定义变量
DEF_VALUE -> TYPE ID | TYPE ID = Exp ;

//赋值语句
S -> ID = Exp;

//返回语句
S -> RETURN;
RETURN -> KEY_RETURN ID | KEY_RETURN VAL_LOC;

//BOOL语句
BOOL -> CMP | Exp ;
CMP -> Exp OP_CMP Exp;
OP_CMP -> >;
OP_CMP -> <;
OP_CMP -> > = ;
OP_CMP -> < = ;
OP_CMP -> = = ;
OP_CMP -> ! = ;

//IF语句
IF_S -> KEY_IF ( BOOL ) { MS };
ELSEIF_S -> KEY_ELSE KEY_IF ( BOOL ) { MS } | ELSEIF_S KEY_ELSE KEY_IF ( BOOL ) { MS };
ELSE_S -> KEY_ELSE { MS } ;
IF_S -> KEY_IF ( BOOL ) { MS } ELSE_S;
IF_S -> KEY_IF ( BOOL ) { MS } ELSEIF_S ELSE_S;

//while语句
WHILE_S -> KEY_WHILE ( BOOL ) { MS };

//表达式	
Exp -> A | Exp OP_LOW A ;
A -> B | A OP_HIGH B ;
B -> ( Exp ) | ID | VAL_LOC | ID ( VAL_LIST ) | ID [ VALUE_INT ] | ID [ ID ] | * ID | SYM_ADDR ID;

//符号优先级
OP_LOW -> + | -;
OP_HIGH -> * | /;

TYPE -> KEY_INT | KEY_FLOAT | KEY_CHAR | KEY_INT * | KEY_CHAR * | KEY_FLOAT *;

VAL_LOC -> VALUE_INT | VALUE_FLOAT | VALUE_STRING | VALUE_CHAR ;

